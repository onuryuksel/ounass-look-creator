export default async function handler(req, res) {
  console.log('ðŸŽ¯ PROMPT GENERATOR API CALLED');
  
  // CORS headers
  res.setHeader('Access-Control-Allow-Origin', '*');
  res.setHeader('Access-Control-Allow-Methods', 'POST, OPTIONS');
  res.setHeader('Access-Control-Allow-Headers', 'Content-Type');

  if (req.method === 'OPTIONS') {
    return res.status(200).end();
  }

  if (req.method !== 'POST') {
    return res.status(405).json({ error: 'Method not allowed' });
  }

  try {
    const { productDetails } = req.body;

    if (!productDetails || !Array.isArray(productDetails)) {
      return res.status(400).json({ error: 'Product details are required' });
    }

    const apiKey = process.env.OunassLookCreator;
    if (!apiKey) {
      return res.status(500).json({ error: 'OunassLookCreator API key not configured' });
    }

    // Prepare product descriptions for Gemini
    const productList = productDetails.map((product, index) => {
      return `- Image ${index + 2}: ${product.name} by ${product.brand} (${product.category})`;
    }).join('\n');

    const promptGenerationRequest = `Create a bulletproof virtual try-on prompt using this exact format:

PRODUCTS AVAILABLE:
${productList}

Generate a prompt that follows this EXACT PATTERN:

"Replace the clothing on the person in Image 1 with: [list each product with image number]. 

REQUIREMENTS:
- Keep the EXACT same person (face, body, hair, skin tone)
- Keep the EXACT same background and environment  
- Keep the EXACT same pose and position
- ONLY change the clothing items
- Make the new clothes fit naturally
- Maintain the same lighting and photo style

This is digital clothing replacement, not creating a new photo."

CRITICAL: Use the exact format above. List each product clearly with its image number. Do not add extra creative language or change the structure.

Write only the formatted prompt, nothing else.`;

    console.log('ðŸŽ¯ Sending prompt generation request to Gemini 1.5 Flash');
    console.log('Products count:', productDetails.length);

    const model = 'gemini-1.5-flash';
    const apiUrl = `https://generativelanguage.googleapis.com/v1beta/models/${model}:generateContent?key=${apiKey}`;

    const payload = {
      contents: [{
        parts: [{ text: promptGenerationRequest }]
      }],
      generationConfig: {
        responseModalities: ["TEXT"],
        temperature: 0.7,
        maxOutputTokens: 500
      }
    };

    const response = await fetch(apiUrl, {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify(payload)
    });

    if (!response.ok) {
      const errorText = await response.text();
      console.error('Gemini API Error:', errorText);
      throw new Error(`Gemini API error: ${response.status} - ${errorText}`);
    }

    const result = await response.json();
    console.log('ðŸŽ¯ Gemini response received');

    // Extract the generated prompt
    let generatedPrompt = '';
    if (result.candidates?.[0]?.content?.parts?.[0]?.text) {
      generatedPrompt = result.candidates[0].content.parts[0].text.trim();
    }

    if (!generatedPrompt) {
      throw new Error('No prompt generated by Gemini');
    }

    console.log('ðŸŽ¯ Generated prompt:', generatedPrompt);

    return res.json({
      success: true,
      generatedPrompt: generatedPrompt,
      debug: {
        model: model,
        productCount: productDetails.length,
        promptLength: generatedPrompt.length
      }
    });

  } catch (error) {
    console.error('ðŸŽ¯ Prompt generation error:', error);
    return res.status(500).json({ 
      error: error.message || 'Failed to generate prompt',
      debug: {
        errorType: error.constructor.name
      }
    });
  }
}
