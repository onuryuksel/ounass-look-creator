export default async function handler(req, res) {
  if (req.method !== 'POST') {
    return res.status(405).json({ error: 'Method not allowed' });
  }

  try {
    const { type, productList, lifestyleInputs } = req.body;
    
    let userQuery, systemPrompt;
    
    // Determine the prompt based on the type
    if (type === 'studio') {
      systemPrompt = `You are a creative director. Your task is to write a short, creative description for a luxury e-commerce studio photoshoot. Focus ONLY on the model's elegant pose, the professional, bright, even lighting, and specific camera details (e.g., lens, aperture). DO NOT mention the products or the background; that is already handled.`;
      userQuery = `Write a creative description for a studio photoshoot.`;
    } else if (type === 'lifestyle') {
      systemPrompt = `You are a creative director. Your task is to write a short, creative description for a luxury lifestyle fashion shoot. Focus ONLY on the model's specific action/pose, the lighting, and specific camera details. DO NOT mention the products or the location/mood; that is already handled.`;
      userQuery = `Write a creative description for a lifestyle photoshoot with the following context: Location is '${lifestyleInputs.location}', mood is '${lifestyleInputs.mood}', time is '${lifestyleInputs.time}'.`;
    }

    const apiKey = process.env.GEMINI_API_KEY;
    if (!apiKey) {
      return res.status(500).json({ error: 'API key not configured' });
    }

    // --- NEW LOGIC: Use only categories in the prompt ---
    // Extracting only the categories from the productList string
    const categories = productList.match(/\(([^)]+)\)/g)?.map(c => c.replace(/[()]/g, '')) || [];
    const categoryList = categories.join(', ');
    const userQueryWithCategories = userQuery.replace(productList, categoryList);
    // --- END NEW LOGIC ---

    const payload = {
      contents: [{ parts: [{ text: userQueryWithCategories }] }], // Use the category-based query
      systemInstruction: { parts: [{ text: systemPrompt }] },
    };

    const apiUrl = `https://generativelanguage.googleapis.com/v1beta/models/gemini-2.5-flash-preview-05-20:generateContent?key=${apiKey}`;
    
    const response = await fetch(apiUrl, {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify(payload)
    });

    if (!response.ok) {
      const errorText = await response.text();
      console.error('Gemini API Error:', errorText);
      throw new Error('Gemini API request failed');
    }

    const result = await response.json();
    const generatedText = result?.candidates?.[0]?.content?.parts?.[0]?.text;

    if (!generatedText) {
      console.error('No text generated by Gemini:', result);
      throw new Error('Failed to get a creative description from the AI.');
    }

    res.status(200).json({ success: true, prompt: generatedText });
  } catch (error) {
    console.error('Error in gemini-prompt handler:', error);
    res.status(500).json({ error: error.message });
  }
}